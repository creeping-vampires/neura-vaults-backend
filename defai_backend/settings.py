"""
Django settings for defai_backend project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import logging
import dj_database_url
from dotenv import load_dotenv

# Configure logging first so we can see what's happening
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Try to load environment variables from .env file if it exists
# This is for local development - Railway and other platforms use their own env var system
try:
    env_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env')
    if os.path.exists(env_file):
        logger.info(f"Loading environment variables from {env_file}")
        load_dotenv(env_file)
    else:
        logger.info(".env file not found, using system environment variables")
except Exception as e:
    logger.warning(f"Error loading .env file: {str(e)}")

# Check which setup mode we're using (local or aws)
SETUP_MODE = os.getenv('SETUP', 'local').lower()
logger.info(f"Using {SETUP_MODE.upper()} setup mode for configuration")

# Only attempt to load secrets from AWS if in aws mode and not using SQLite
if SETUP_MODE == 'aws' and os.getenv('USE_SQLITE', '').lower() != 'true':
    # Try to load secrets from AWS Secrets Manager
    try:
        from .aws_secrets import load_secrets_to_env, get_secret
        
        # Define which secret to use based on environment
        aws_secret_name = os.environ.get('AWS_SECRET_NAME', 'defai/backend')
        aws_region = os.environ.get('AWS_REGION', 'us-east-1')
        
        if aws_secret_name and aws_region:
            try:
                # Load main application secrets
                secrets = get_secret(aws_secret_name, aws_region)
                for key, value in secrets.items():
                    os.environ.setdefault(key, str(value))
                logger.info(f"Successfully loaded secrets from AWS secret: {aws_secret_name}")

                # If a separate DB secret is specified, load the password from it.
                # This is useful for RDS-managed secrets.
                db_secret_name = os.getenv("AWS_DB_SECRET_NAME")
                if db_secret_name:
                    logger.info(f"Attempting to load DB password from separate secret: {db_secret_name}")
                    db_secrets = get_secret(db_secret_name, aws_region)
                    # The RDS secret is a JSON string with a 'password' key.
                    if 'password' in db_secrets:
                        os.environ['DB_PASSWORD'] = db_secrets['password']
                        logger.info(f"Successfully loaded and set DB_PASSWORD from secret: {db_secret_name}")
                    else:
                        logger.warning(f"DB secret {db_secret_name} was found but did not contain a 'password' key.")

            except Exception as e:
                logger.warning(f"Error loading AWS Secrets: {e}. Falling back to .env file")

        else:
            logger.warning("AWS_SECRET_NAME or AWS_REGION is not set. Falling back to .env file")

    except Exception as e:
        logger.warning(f"Error loading AWS Secrets: {str(e)}. Falling back to .env file")
        # Fall back to .env file
        load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-n0*!p^l&99t71wum(g0m*r-%4s5wu*xk6^whslir7ovbmjn)0k')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', 'True') == 'True'

# Environment setting (development, staging, production)
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

# Application version
VERSION = os.getenv('VERSION', '0.1.0')

# Maximum number of agents that can run concurrently
MAX_CONCURRENT_AGENTS = int(os.getenv('MAX_CONCURRENT_AGENTS', '5'))

# Admin user privy ID for special admin endpoints
ADMIN_PRIVY_ID = os.getenv('ADMIN_PRIVY_ID')

# Default credits for new users
DEFAULT_USER_CREDITS = int(os.getenv('DEFAULT_USER_CREDITS', '0'))

# Invite code settings
KOL_INVITE_CREDITS = int(os.getenv('KOL_INVITE_CREDITS', '5'))
KOL_DAILY_INVITE_LIMIT = int(os.getenv('KOL_DAILY_INVITE_LIMIT', '5'))
ADMIN_INVITE_CREDITS = int(os.getenv('ADMIN_INVITE_CREDITS', '10'))
# Invite code expiration time in hours
INVITE_CODE_EXPIRY_HOURS = int(os.getenv('INVITE_CODE_EXPIRY_HOURS', '24'))

# Add the server IP directly to ensure it's always included
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '3.80.101.83', '0.0.0.0', 'api.hedgewater.xyz']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "data",
    "rest_framework",
    "django_filters",
    "drf_spectacular",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "defai_backend.middleware.CloseDatabaseConnectionsMiddleware",  # Add this middleware to close DB connections
]

ROOT_URLCONF = "defai_backend.urls"

# Disable automatic URL slash appending
APPEND_SLASH = False

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "defai_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if os.getenv('USE_SQLITE', '').lower() == 'true':
    # If USE_SQLITE is true, use a local SQLite database. This is the top priority.
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
elif os.getenv('DATABASE_URL'):
    # If DATABASE_URL is set, use it to connect to a local PostgreSQL instance.
    DATABASES = {
        'default': dj_database_url.config(
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
else:
    # Otherwise, default to connecting to AWS RDS using individual environment
    # variables populated by AWS Secrets Manager.
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Ensure Swagger UI and ReDoc can find static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Privy Settings
PRIVY_API_URL = os.getenv('PRIVY_API_URL')
PRIVY_APP_ID = os.getenv('PRIVY_APP_ID')
PRIVY_API_KEY = os.getenv('PRIVY_API_KEY')

# OpenAI Settings
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Vector Database Settings
VECTOR_DB_DIRECTORY = os.getenv('VECTOR_DB_DIRECTORY', './vector_db')
CHROMA_COLLECTION_NAME = os.getenv('CHROMA_COLLECTION_NAME', 'token_knowledge_base')


# Trade API Settings
TRADE_API_BASE_URL = os.getenv('TRADE_API_BASE_URL')
API_TOKEN_KEY = os.getenv('API_TOKEN_KEY')


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'data.authentication.PrivyAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
}

# Spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Nura Vault Backend',
    'DESCRIPTION': 'API for Nura Vault platform',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
    },
    'COMPONENT_SPLIT_REQUEST': True,
    'TAGS': [
        {'name': 'Agent', 'description': 'Agent management endpoints'},
    ],
}

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'error_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'error.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'data': {  # This is your app's logger
            'handlers': ['file', 'error_file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'defai-cache',
    }
}

# Cache timeouts (in seconds)
DASHBOARD_CACHE_TIMEOUT = 60  # 1 minutes
AGENT_LIST_CACHE_TIMEOUT = 60  # 1 minute
AGENT_DETAIL_CACHE_TIMEOUT = 60  # 1 minute

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins for development and frontend access
CORS_ALLOW_CREDENTIALS = True

# Allowed origins list (kept for reference, but CORS_ALLOW_ALL_ORIGINS takes precedence)
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',
    'http://localhost:8080',
    'https://agent.hedgewater.xyz',
    'https://www.agent.hedgewater.xyz',
    'http://127.0.0.1:8080',
    'http://3.80.101.83:8000'
]
CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS

# Required headers and methods
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-requested-by',
    'x-csrftoken',
    'x-xsrf-token',
]

# Allowed methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Expose headers to the client
CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-xsrf-token',
    'x-csrftoken',
]

# Required for production
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '3.80.101.83',
    '0.0.0.0',
    'api.hedgewater.xyz',
    'agent.hedgewater.xyz',
    'yield-allocator-backend-production.up.railway.app',
    'neura-vault-backend-production.up.railway.app'
]


# Security Settings
if not DEBUG:
    # HTTPS settings
    SECURE_SSL_REDIRECT = False  # Changed to False to prevent redirects when HTTPS is not set up
    SESSION_COOKIE_SECURE = False  # Changed to False since we're not using HTTPS
    CSRF_COOKIE_SECURE = False  # Changed to False since we're not using HTTPS
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

    
    # CORS settings in production - allow all origins for now to facilitate development
    # CORS_ALLOW_ALL_ORIGINS = False
    # CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')

BLOCKCHAIN_RPC_URL = os.getenv('BLOCKCHAIN_RPC_URL')
COINGECKO_API_KEY = os.getenv('COINGECKO_API_KEY')
MIN_HYPE_REQUIRED = os.getenv('MIN_HYPE_REQUIRED', 0.1)
MIN_HWTR_REQUIRED = os.getenv('MIN_HWTR_REQUIRED', 4500)
FEE_WALLET_ADDRESS = os.getenv('FEE_WALLET_ADDRESS')
MIN_FEUSD_REQUIRED = os.getenv('MIN_FEUSD_REQUIRED', 100)
