# Generated by Django 5.2.1 on 2025-09-04 07:15

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Agent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True, null=True, upload_to="agent_profiles/"
                    ),
                ),
                ("base_token", models.CharField(max_length=100)),
                (
                    "min_trade_size",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "max_trade_size",
                    models.DecimalField(decimal_places=8, max_digits=20),
                ),
                (
                    "min_stable_size",
                    models.DecimalField(decimal_places=8, default=0, max_digits=20),
                ),
                (
                    "max_stable_size",
                    models.DecimalField(decimal_places=8, default=0, max_digits=20),
                ),
                (
                    "whitelist_presets",
                    models.TextField(
                        help_text="Serialized list of whitelisted presets"
                    ),
                ),
                (
                    "trade_frequency",
                    models.IntegerField(help_text="Trade frequency in minutes"),
                ),
                ("strategy_description", models.TextField()),
                ("detailed_instructions", models.TextField()),
                ("llm_model", models.CharField(max_length=100)),
                (
                    "risk_profile",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("conservative", "Conservative"),
                            ("moderate", "Moderate"),
                            ("highRisk", "High Risk"),
                        ],
                        help_text="Risk profile: conservative, moderate, or high risk",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "trading_system",
                    models.CharField(
                        choices=[
                            ("value", "Value"),
                            ("swing", "Swing"),
                            ("scalper", "Scalper"),
                            ("custom", "Custom"),
                            ("unit_farmer", "Unit Farmer"),
                        ],
                        help_text="Trading system type: value, swing, or scalper",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("idle", "Idle"),
                            ("running", "Running"),
                            ("paused", "Paused"),
                            ("deleted", "Deleted"),
                        ],
                        default="idle",
                        help_text="Current status of the agent",
                        max_length=10,
                    ),
                ),
                (
                    "version",
                    models.IntegerField(default=1, help_text="Agent version number"),
                ),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "base_manager_name": "objects",
                "default_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="AgnosticThought",
            fields=[
                ("thoughtId", models.AutoField(primary_key=True, serialize=False)),
                ("createdAt", models.DateTimeField(auto_now_add=True)),
                ("thought", models.TextField()),
                ("agent_role", models.CharField(max_length=255)),
                (
                    "execution_mode",
                    models.CharField(default="agent-agnostic", max_length=50),
                ),
                ("crew_id", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "data_agnosticthought",
                "ordering": ["-createdAt"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("privy_address", models.CharField(max_length=255, unique=True)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_deleted", models.BooleanField(default=False)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "base_manager_name": "objects",
                "default_manager_name": "objects",
            },
        ),
        migrations.CreateModel(
            name="VaultPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vault_address",
                    models.CharField(
                        help_text="The vault contract address", max_length=255
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        blank=True,
                        help_text="The token symbol, e.g., USDe, USDT0",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        blank=True,
                        help_text="Protocol with highest APY, e.g., HyperLend, HypurrFi",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "pool_apy",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Highest APY from YieldReport excluding Felix",
                        max_digits=10,
                    ),
                ),
                (
                    "share_price",
                    models.CharField(
                        help_text="Raw share price calculation (totalAssets * 10^18) / totalSupply as string",
                        max_length=78,
                    ),
                ),
                (
                    "share_price_formatted",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Formatted share price for display",
                        max_digits=20,
                    ),
                ),
                (
                    "total_assets",
                    models.CharField(
                        help_text="Total assets in the vault as string", max_length=78
                    ),
                ),
                (
                    "total_supply",
                    models.CharField(
                        help_text="Total supply of vault shares as string",
                        max_length=78,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Vault Price",
                "verbose_name_plural": "Vault Prices",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="YieldReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        blank=True,
                        help_text="The token symbol, e.g., HYPE, USDT0",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "protocol",
                    models.CharField(
                        blank=True,
                        help_text="The protocol or pool name, e.g., HyperLend",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "apy",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Annual Percentage Yield",
                        max_digits=10,
                    ),
                ),
                (
                    "tvl",
                    models.DecimalField(
                        decimal_places=2, help_text="Total Value Locked", max_digits=20
                    ),
                ),
                (
                    "token_address",
                    models.CharField(
                        blank=True,
                        help_text="The token's contract address",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "pool_address",
                    models.CharField(
                        blank=True,
                        help_text="The protocol's pool contract address",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "is_current_best",
                    models.BooleanField(
                        default=False,
                        help_text="Is this the best APY for this token in the report?",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Yield Report",
                "verbose_name_plural": "Yield Reports",
                "ordering": ["-created_at", "token", "-apy"],
            },
        ),
        migrations.CreateModel(
            name="AgentTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("from_token", models.CharField(max_length=50)),
                ("to_token", models.CharField(max_length=50)),
                ("amount_usd", models.DecimalField(decimal_places=2, max_digits=20)),
                ("from_amount", models.DecimalField(decimal_places=2, max_digits=20)),
                ("to_amount", models.DecimalField(decimal_places=2, max_digits=20)),
                ("from_price", models.DecimalField(decimal_places=2, max_digits=20)),
                ("to_price", models.DecimalField(decimal_places=2, max_digits=20)),
                ("transaction_hash", models.CharField(max_length=255)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trades",
                        to="data.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgentWallet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=255)),
                ("wallet_id", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "agent",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="wallet",
                        to="data.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AgentFunds",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("token_name", models.CharField(max_length=100)),
                ("token_symbol", models.CharField(max_length=20)),
                (
                    "token_address",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("amount", models.DecimalField(decimal_places=10, max_digits=30)),
                (
                    "decimals",
                    models.IntegerField(
                        default=18, help_text="Number of decimal places for the token"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this fund entry is active"
                    ),
                ),
                (
                    "wallet",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="funds",
                        to="data.agentwallet",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OptimizationResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("from_protocol", models.CharField(max_length=100)),
                ("to_protocol", models.CharField(max_length=100)),
                ("amount_usd", models.DecimalField(decimal_places=2, max_digits=20)),
                ("current_apr_from", models.FloatField()),
                ("current_apr_to", models.FloatField()),
                ("projected_apr", models.FloatField()),
                ("utilization_from", models.FloatField()),
                ("utilization_to", models.FloatField()),
                ("extra_yield_bps", models.FloatField()),
                ("notes", models.TextField(blank=True)),
            ],
            options={
                "db_table": "poolApy",
                "indexes": [
                    models.Index(
                        fields=["timestamp"], name="poolApy_timesta_9e7ff0_idx"
                    ),
                    models.Index(
                        fields=["from_protocol", "to_protocol"],
                        name="poolApy_from_pr_4ce86b_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PoolAPR",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pool_address",
                    models.CharField(
                        help_text="Pool/Vault contract address", max_length=42
                    ),
                ),
                (
                    "pool_name",
                    models.CharField(
                        blank=True,
                        help_text="Pool name if available",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this APR was calculated"
                    ),
                ),
                (
                    "calculation_window_days",
                    models.IntegerField(
                        default=7, help_text="Number of days used for APR calculation"
                    ),
                ),
                (
                    "pps_start",
                    models.DecimalField(
                        decimal_places=18,
                        help_text="Price per share at start of window",
                        max_digits=30,
                    ),
                ),
                (
                    "pps_end",
                    models.DecimalField(
                        decimal_places=18,
                        help_text="Price per share at end of window",
                        max_digits=30,
                    ),
                ),
                (
                    "block_start",
                    models.BigIntegerField(
                        help_text="Block number at start of calculation window"
                    ),
                ),
                (
                    "block_end",
                    models.BigIntegerField(
                        help_text="Block number at end of calculation window"
                    ),
                ),
                (
                    "period_return",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Period return as decimal (e.g., 0.05 for 5%)",
                        max_digits=10,
                    ),
                ),
                (
                    "apr",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Annualized Percentage Rate (simple interest)",
                        max_digits=10,
                    ),
                ),
                (
                    "apy",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Annual Percentage Yield (compound interest)",
                        max_digits=10,
                    ),
                ),
                (
                    "rpc_url",
                    models.CharField(
                        blank=True,
                        help_text="RPC URL used for calculation",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "calculation_status",
                    models.CharField(
                        choices=[
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("partial", "Partial"),
                        ],
                        default="success",
                        max_length=20,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if calculation failed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["pool_address", "-timestamp"],
                        name="data_poolap_pool_ad_f4a02d_idx",
                    ),
                    models.Index(
                        fields=["calculation_status"],
                        name="data_poolap_calcula_18aa8a_idx",
                    ),
                    models.Index(
                        fields=["-timestamp"], name="data_poolap_timesta_e3b436_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PortfolioSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField()),
                (
                    "total_usd_value",
                    models.DecimalField(decimal_places=10, max_digits=30),
                ),
                ("token_values_json", models.TextField()),
                (
                    "absolute_pnl_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        default=0,
                        max_digits=30,
                        null=True,
                    ),
                ),
                (
                    "percentage_pnl",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        default=0,
                        max_digits=30,
                        null=True,
                    ),
                ),
                (
                    "total_deposits",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        default=0,
                        max_digits=30,
                        null=True,
                    ),
                ),
                (
                    "total_withdrawals",
                    models.DecimalField(
                        blank=True,
                        decimal_places=10,
                        default=0,
                        max_digits=30,
                        null=True,
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio_snapshots",
                        to="data.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CapitalFlow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "flow_type",
                    models.CharField(
                        choices=[("deposit", "Deposit"), ("withdrawal", "Withdrawal")],
                        max_length=20,
                    ),
                ),
                ("token_address", models.CharField(max_length=42)),
                ("token_symbol", models.CharField(max_length=10)),
                ("amount", models.DecimalField(decimal_places=10, max_digits=30)),
                ("usd_value", models.DecimalField(decimal_places=10, max_digits=30)),
                (
                    "transaction_hash",
                    models.CharField(blank=True, max_length=66, null=True),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capital_flows",
                        to="data.agent",
                    ),
                ),
                (
                    "detected_from_snapshot",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="detected_flows",
                        to="data.portfoliosnapshot",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RebalancingTrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[("DEPOSIT", "Deposit"), ("WITHDRAWAL", "Withdrawal")],
                        max_length=20,
                    ),
                ),
                (
                    "scenario_type",
                    models.CharField(
                        choices=[
                            ("IDLE_DEPLOYMENT", "Idle Deployment"),
                            ("REBALANCING", "Rebalancing"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Success"),
                            ("FAILED", "Failed"),
                            ("PENDING", "Pending"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "pool_address",
                    models.CharField(help_text="Pool contract address", max_length=42),
                ),
                (
                    "protocol",
                    models.CharField(
                        help_text="Protocol name (e.g., Aave, HypurrFi)", max_length=100
                    ),
                ),
                (
                    "amount_wei",
                    models.DecimalField(
                        decimal_places=0,
                        help_text="Transaction amount in wei",
                        max_digits=78,
                    ),
                ),
                (
                    "amount_formatted",
                    models.DecimalField(
                        decimal_places=18,
                        help_text="Transaction amount in human-readable format",
                        max_digits=30,
                    ),
                ),
                (
                    "transaction_hash",
                    models.CharField(
                        blank=True,
                        help_text="Ethereum transaction hash",
                        max_length=66,
                        null=True,
                    ),
                ),
                (
                    "block_number",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Block number where transaction was mined",
                        null=True,
                    ),
                ),
                (
                    "executor_address",
                    models.CharField(
                        blank=True,
                        help_text="Address that executed the transaction",
                        max_length=42,
                        null=True,
                    ),
                ),
                (
                    "gas_used",
                    models.BigIntegerField(
                        blank=True, help_text="Gas used for the transaction", null=True
                    ),
                ),
                (
                    "gas_cost_eth",
                    models.DecimalField(
                        blank=True,
                        decimal_places=18,
                        help_text="Gas cost in ETH",
                        max_digits=30,
                        null=True,
                    ),
                ),
                (
                    "allocation_index",
                    models.IntegerField(
                        blank=True, help_text="Index in the allocation array", null=True
                    ),
                ),
                (
                    "execution_timestamp",
                    models.DateTimeField(help_text="When the transaction was executed"),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if transaction failed",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-execution_timestamp"],
                "indexes": [
                    models.Index(
                        fields=["scenario_type", "-execution_timestamp"],
                        name="data_rebala_scenari_ca3cf4_idx",
                    ),
                    models.Index(
                        fields=["transaction_type", "-execution_timestamp"],
                        name="data_rebala_transac_35e730_idx",
                    ),
                    models.Index(
                        fields=["status"], name="data_rebala_status_b8bd28_idx"
                    ),
                    models.Index(
                        fields=["pool_address"], name="data_rebala_pool_ad_dd6d3e_idx"
                    ),
                    models.Index(
                        fields=["-execution_timestamp"],
                        name="data_rebala_executi_6828cb_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Thought",
            fields=[
                ("thoughtId", models.AutoField(primary_key=True, serialize=False)),
                ("createdAt", models.DateTimeField(auto_now_add=True)),
                ("thought", models.TextField()),
                ("agent_role", models.CharField(max_length=255)),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="thoughts",
                        to="data.agent",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="InviteCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=20, unique=True)),
                (
                    "creator_role",
                    models.CharField(
                        choices=[("user", "User"), ("kol", "KOL"), ("admin", "Admin")],
                        max_length=20,
                    ),
                ),
                ("redeemable_credits", models.IntegerField()),
                ("assign_kol_role", models.BooleanField(default=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("used", "Used"),
                            ("expired", "Expired"),
                        ],
                        default="active",
                        max_length=10,
                    ),
                ),
                ("redeemed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_invite_codes",
                        to="data.user",
                    ),
                ),
                (
                    "redeemed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="redeemed_invite_codes",
                        to="data.user",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CreditRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "privy_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Privy ID of the user making the request",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("twitter_handle", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("approved", "Approved"),
                            ("rejected", "Rejected"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("credits_requested", models.IntegerField(default=1)),
                ("credits_granted", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="credit_requests",
                        to="data.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Credit Request",
                "verbose_name_plural": "Credit Requests",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="agent",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="agents",
                to="data.user",
            ),
        ),
        migrations.CreateModel(
            name="UserCredits",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("balance", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="credits",
                        to="data.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Credits",
                "verbose_name_plural": "User Credits",
            },
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("user", "User"), ("kol", "KOL"), ("admin", "Admin")],
                        default="user",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles",
                        to="data.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Role",
                "verbose_name_plural": "User Roles",
            },
        ),
        migrations.CreateModel(
            name="Withdrawal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=18,
                        help_text="Decimal formatted value of the token",
                        max_digits=36,
                    ),
                ),
                (
                    "amount_wei",
                    models.DecimalField(
                        decimal_places=0,
                        help_text="Raw amount received in request body (wei)",
                        max_digits=78,
                        null=True,
                    ),
                ),
                (
                    "usd_value",
                    models.DecimalField(
                        decimal_places=10,
                        default=0,
                        help_text="USD value of the token",
                        max_digits=78,
                        null=True,
                    ),
                ),
                ("token_symbol", models.CharField(max_length=20)),
                (
                    "to_address",
                    models.CharField(
                        blank=True,
                        help_text="Ethereum address to withdraw funds to",
                        max_length=42,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("trx_hash", models.CharField(blank=True, max_length=100, null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="withdrawals",
                        to="data.agent",
                    ),
                ),
                (
                    "fund",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="withdrawals",
                        to="data.agentfunds",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="withdrawals",
                        to="data.user",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="YieldMonitorMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(help_text="Date for these daily metrics")),
                (
                    "vault_address",
                    models.CharField(
                        help_text="YieldAllocatorVault contract address", max_length=42
                    ),
                ),
                (
                    "total_runs",
                    models.IntegerField(
                        default=0, help_text="Total number of worker runs"
                    ),
                ),
                (
                    "successful_runs",
                    models.IntegerField(
                        default=0, help_text="Number of successful runs"
                    ),
                ),
                (
                    "failed_runs",
                    models.IntegerField(default=0, help_text="Number of failed runs"),
                ),
                (
                    "total_yield_claimed",
                    models.DecimalField(
                        decimal_places=0,
                        default=0,
                        help_text="Total yield claimed on this date (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "total_yield_reinvested",
                    models.DecimalField(
                        decimal_places=0,
                        default=0,
                        help_text="Total yield reinvested on this date (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "average_yield_percentage",
                    models.DecimalField(
                        decimal_places=6,
                        default=0,
                        help_text="Average yield percentage for the day",
                        max_digits=10,
                    ),
                ),
                (
                    "total_transactions",
                    models.IntegerField(
                        default=0, help_text="Total number of transactions"
                    ),
                ),
                (
                    "total_gas_cost_usd",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total gas costs in USD for the day",
                        max_digits=15,
                    ),
                ),
                (
                    "average_execution_time",
                    models.DecimalField(
                        decimal_places=3,
                        default=0,
                        help_text="Average execution time in seconds",
                        max_digits=10,
                    ),
                ),
                (
                    "vault_value_start",
                    models.DecimalField(
                        blank=True,
                        decimal_places=0,
                        help_text="Vault value at start of day (in wei)",
                        max_digits=78,
                        null=True,
                    ),
                ),
                (
                    "vault_value_end",
                    models.DecimalField(
                        blank=True,
                        decimal_places=0,
                        help_text="Vault value at end of day (in wei)",
                        max_digits=78,
                        null=True,
                    ),
                ),
                (
                    "daily_growth_percentage",
                    models.DecimalField(
                        decimal_places=6,
                        default=0,
                        help_text="Daily growth percentage",
                        max_digits=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-date"],
                "indexes": [
                    models.Index(fields=["date"], name="data_yieldm_date_c2753f_idx"),
                    models.Index(
                        fields=["vault_address"], name="data_yieldm_vault_a_121306_idx"
                    ),
                ],
                "unique_together": {("date", "vault_address")},
            },
        ),
        migrations.CreateModel(
            name="YieldMonitorRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("partial", "Partial Success"),
                            ("skipped", "Skipped"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "vault_address",
                    models.CharField(
                        help_text="YieldAllocatorVault contract address", max_length=42
                    ),
                ),
                (
                    "asset_address",
                    models.CharField(
                        help_text="Asset token contract address", max_length=42
                    ),
                ),
                (
                    "asset_symbol",
                    models.CharField(help_text="Asset token symbol", max_length=20),
                ),
                (
                    "asset_decimals",
                    models.IntegerField(help_text="Asset token decimals"),
                ),
                (
                    "total_principal_deposited",
                    models.DecimalField(
                        decimal_places=0,
                        help_text="Total principal deposited across all pools (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "current_total_value",
                    models.DecimalField(
                        decimal_places=0,
                        help_text="Current total value of vault assets (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "total_yield_generated",
                    models.DecimalField(
                        decimal_places=0,
                        help_text="Total yield generated (current_value - principal) (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "total_yield_percentage",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Yield percentage (yield/principal * 100)",
                        max_digits=10,
                    ),
                ),
                (
                    "idle_assets",
                    models.DecimalField(
                        decimal_places=0,
                        help_text="Idle assets in vault (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "total_withdrawn",
                    models.DecimalField(
                        decimal_places=0,
                        default=0,
                        help_text="Total amount withdrawn across all pools (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "total_reinvested",
                    models.DecimalField(
                        decimal_places=0,
                        default=0,
                        help_text="Total amount reinvested across all pools (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "pools_processed",
                    models.IntegerField(
                        default=0, help_text="Number of pools processed"
                    ),
                ),
                (
                    "pools_with_yield",
                    models.IntegerField(
                        default=0, help_text="Number of pools that had yield claimed"
                    ),
                ),
                (
                    "yield_threshold_used",
                    models.DecimalField(
                        decimal_places=8,
                        help_text="Yield threshold percentage used for this run",
                        max_digits=10,
                    ),
                ),
                (
                    "min_claim_amount_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Minimum claim amount in USD used for this run",
                        max_digits=10,
                    ),
                ),
                (
                    "max_gas_cost_usd",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Maximum gas cost in USD used for this run",
                        max_digits=10,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if run failed", null=True
                    ),
                ),
                (
                    "execution_duration_seconds",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        help_text="Duration of the worker run in seconds",
                        max_digits=10,
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["timestamp"], name="data_yieldm_timesta_464f95_idx"
                    ),
                    models.Index(
                        fields=["status"], name="data_yieldm_status_8f2613_idx"
                    ),
                    models.Index(
                        fields=["vault_address"], name="data_yieldm_vault_a_3b953f_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="YieldMonitorPoolSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pool_address",
                    models.CharField(help_text="Pool contract address", max_length=42),
                ),
                (
                    "pool_name",
                    models.CharField(
                        blank=True,
                        help_text="Pool name if available",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "principal_deposited",
                    models.DecimalField(
                        decimal_places=0,
                        help_text="Principal amount deposited in this pool (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "principal_percentage",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Percentage of total principal this pool represents",
                        max_digits=10,
                    ),
                ),
                (
                    "calculated_yield_share",
                    models.DecimalField(
                        decimal_places=0,
                        default=0,
                        help_text="This pool's calculated share of total yield (in wei)",
                        max_digits=78,
                    ),
                ),
                (
                    "yield_percentage",
                    models.DecimalField(
                        decimal_places=6,
                        default=0,
                        help_text="Yield percentage for this pool",
                        max_digits=10,
                    ),
                ),
                (
                    "was_processed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this pool was processed for yield claiming",
                    ),
                ),
                (
                    "skip_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason why pool was skipped if not processed",
                        null=True,
                    ),
                ),
                (
                    "monitor_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pool_snapshots",
                        to="data.yieldmonitorrun",
                    ),
                ),
            ],
            options={
                "ordering": ["-monitor_run__timestamp", "pool_address"],
            },
        ),
        migrations.CreateModel(
            name="YieldMonitorTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[("withdrawal", "Withdrawal"), ("deposit", "Deposit")],
                        max_length=10,
                    ),
                ),
                (
                    "transaction_hash",
                    models.CharField(
                        help_text="Ethereum transaction hash", max_length=66
                    ),
                ),
                (
                    "block_number",
                    models.BigIntegerField(
                        blank=True,
                        help_text="Block number where transaction was mined",
                        null=True,
                    ),
                ),
                (
                    "amount_wei",
                    models.DecimalField(
                        decimal_places=0,
                        help_text="Transaction amount in wei",
                        max_digits=78,
                    ),
                ),
                (
                    "amount_formatted",
                    models.DecimalField(
                        decimal_places=18,
                        help_text="Transaction amount in human-readable format",
                        max_digits=30,
                    ),
                ),
                (
                    "gas_used",
                    models.BigIntegerField(
                        blank=True, help_text="Gas used for the transaction", null=True
                    ),
                ),
                (
                    "gas_price_wei",
                    models.DecimalField(
                        blank=True,
                        decimal_places=0,
                        help_text="Gas price used for the transaction (in wei)",
                        max_digits=78,
                        null=True,
                    ),
                ),
                (
                    "transaction_cost_usd",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated transaction cost in USD",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=10,
                    ),
                ),
                ("submitted_at", models.DateTimeField(auto_now_add=True)),
                ("confirmed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if transaction failed",
                        null=True,
                    ),
                ),
                (
                    "monitor_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="data.yieldmonitorrun",
                    ),
                ),
                (
                    "pool_snapshot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="data.yieldmonitorpoolsnapshot",
                    ),
                ),
            ],
            options={
                "ordering": ["-submitted_at"],
            },
        ),
        migrations.AddIndex(
            model_name="portfoliosnapshot",
            index=models.Index(
                fields=["agent", "timestamp"], name="data_portfo_agent_i_d5e87b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="capitalflow",
            index=models.Index(
                fields=["agent", "timestamp"], name="data_capita_agent_i_d804aa_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="capitalflow",
            index=models.Index(
                fields=["agent", "flow_type"], name="data_capita_agent_i_363e3e_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="capitalflow",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("flow_type", "deposit"), ("transaction_hash__isnull", False)
                ),
                fields=("transaction_hash",),
                name="unique_deposit_transaction_hash",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userrole",
            unique_together={("user", "role")},
        ),
        migrations.AddIndex(
            model_name="yieldmonitorpoolsnapshot",
            index=models.Index(
                fields=["pool_address"], name="data_yieldm_pool_ad_82fd98_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="yieldmonitorpoolsnapshot",
            index=models.Index(
                fields=["monitor_run", "pool_address"],
                name="data_yieldm_monitor_be5552_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="yieldmonitortransaction",
            index=models.Index(
                fields=["transaction_hash"], name="data_yieldm_transac_cf9f2f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="yieldmonitortransaction",
            index=models.Index(
                fields=["monitor_run", "transaction_type"],
                name="data_yieldm_monitor_94a57a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="yieldmonitortransaction",
            index=models.Index(
                fields=["pool_snapshot", "transaction_type"],
                name="data_yieldm_pool_sn_3e0294_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="yieldmonitortransaction",
            index=models.Index(fields=["status"], name="data_yieldm_status_267160_idx"),
        ),
    ]
